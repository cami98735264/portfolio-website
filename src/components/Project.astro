---
/* asign type number to projectId from astro.props */
const { projectId } = Astro.props as { projectId: number };
import { Image } from "astro:assets";
import Node from "../icons/Node.astro";
import Typescript from "../icons/Typescript.astro";
import React from "../icons/React.astro";
import MySQL from "../icons/MySQL.astro";
import Github from "../icons/Github.astro";
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import { projectsRoutes } from "../utils/projectsScreenshots.ts";
const projectsScreenshots: any = projectsRoutes;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const projectsList: any = t("projectsList");
---

<div class="project__container">
  <div class="project">
    <div class="project__description__container">
      <div class="project__header">
        <div class="project__technologies">
          <span class="project__technology">
            <Node />
          </span>
          <span class="project__technology">
            <Typescript />
          </span>
          <span class="project__technology">
            <React />
          </span>
          <span class="project__technology">
            <MySQL />
          </span>
        </div>
        <h2 class="project__title">{projectsList[projectId].title}</h2>

        <div class="project__subtitle">
          {projectsList[projectId].projectType}
        </div>
      </div>
      <div class="project__description">
        <span>
          {projectsList[projectId].description}
        </span>
      </div>
      <div class="project__links">
        <a class="source__code"
          ><span class="links__text source__code__text">Source code</span><span
            class="links__icons source__code__icon"><Github /></span
          ></a
        >
        <a class="live__preview"
          ><span class="links__text live__preview__text">Live preview</span
          ><span class="links__icons live__preview__icon"><Github /></span></a
        >
      </div>
      <div class="project__timestamp">
        <span> {projectsList[projectId].date}</span>
      </div>
    </div>
    <div class="project__pictures__container slider-container">
      <div class="slider">
        <div class="slider__images">
          {
            projectsScreenshots[projectId].screenshots.map((screenshot: string, index: number) => (
              <Image
                class="slider-image"
                src={screenshot}
                data-index={index}
                alt={`Screenshot ${index + 1}`}
                width={800}
                height={600}
              />
            ))
          }
        </div>
        <button class="slider__button prev" aria-label="Previous Slide"
          >&lt;</button
        >
        <button class="slider__button next" aria-label="Next Slide">&gt;</button
        >
      </div>
    </div>
    <div id="lightbox" class="lightbox">
      <img id="lightbox-image" class="lightbox-image" />
    </div>
  </div>
</div>

<style>
  .slider {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 1;
  }
  /* Lightbox styles */
.lightbox {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  justify-content: center;
  align-items: center;
  z-index: 999;
}

/* Show the lightbox */
.lightbox.show {
  display: flex;
}

/* Lightbox image styles */
.lightbox-image {
  max-width: 90%;
  max-height: 90%;
  object-fit: contain;
  border-radius: 10px;
  position: relative; /* Ensure buttons are positioned relative to the image */
}
  .slider__images {
    height: 100%;
    display: flex;
    align-items: center;
    transition: transform 0.5s ease;
  }

  .slider-image {
    height: 100%;
    width: 100%;
    object-fit: cover;
    border-radius: 20px;
  }

  .slider__button {
  position: absolute;
  top: 50%; /* Posicionar el botón en la mitad del contenedor */
  transform: translateY(-50%); /* Ajustar la posición exacta al centro */
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  font-size: 24px;
  border-radius: 50%;
  z-index: 10; /* Asegurar que los botones estén por encima del slider */
}

.slider__button.prev {
  left: 10px; /* Colocar el botón de 'prev' en el lado izquierdo */
}

.slider__button.next {
  right: 10px; /* Colocar el botón de 'next' en el lado derecho */
}


  .project__container {
    padding: 60px;
    display: flex;
    height: calc(100dvh - 100px);
    max-width: 2118px;
    max-height: 800px;
    justify-content: center;
    align-items: center;
  }
  .project__timestamp {
    color: #6b6b6b;
    border-radius: 15px;
    display: flex;
    justify-content: flex-end;
  }
  .project__header {
    gap: 20px;
    display: flex;
    flex-direction: column;
  }
  .project__timestamp span {
    background-color: #1d1d1d;
    padding: 15px 20px;
    border-radius: 15px;
    font-size: clamp(0.8rem, 2vw, 1.2rem);
  }
  .project {
    gap: 36px;
    padding: 20px;
    height: 100%;
    flex: 1 1 0;
    border-radius: 40px;
    display: flex;
    flex-wrap: wrap;
  }
  .project__description__container {
    display: flex;
    flex: 1 1 700px;
    flex-direction: column;
    justify-content: space-between;
    gap: 20px;
  }
  .links__icons * {
    width: 40px;
    height: 40px;
  }
  .project__pictures__container {
    /* add a white box shadow to the image */
    outline: 3px solid #5e5e5e;
    border-radius: 20px;
    position: relative;
    flex: 1 1 700px;
    z-index: 1;
    display: flex;
    height: 100%;
    justify-content: center;
    align-items: center;
  }
  .project__subtitle {
    color: var(--subtitles);
    font-size: clamp(0.8rem, 2vw, 1.4rem);
  }
  .project__title {
    font-size: clamp(1.5rem, 2vw, 2.5rem);
    color: var(--titles);
    font-weight: 400;
  }
  .project__description span {
    height: 100%;
    color: var(--description);
    font-size: clamp(0.8rem, 2vw, 1.4rem);
  }
  .project__description {
    max-height: 100%;
    /* make overflow work */
    overflow: auto;
    display: -webkit-box;
    -webkit-line-clamp: 5;
    -webkit-box-orient: vertical;
  }
  /* stilyze scrollbar following the website style */
  .project__description::-webkit-scrollbar {
    width: 10px;
  }
  .project__description::-webkit-scrollbar-thumb {
    background-color: #1d1d1d;
    border-radius: 10px;
  }
  .project__description::-webkit-scrollbar-track {
    background-color: #1d1d1d;
    border-radius: 10px;
  }
  .project__description::-webkit-scrollbar-thumb:hover, .project__description::-webkit-scrollbar-thumb:active,
  .project__description::-webkit-scrollbar-track:hover, .project__description::-webkit-scrollbar-track:active {
    background-color: #1d1d1d;
  }

  .project__technologies {
    display: flex;
    gap: 10px;
  }
  .project__technology {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 15px;
    background-color: rgb(47, 47, 47);
    border-radius: 10px;
  }
  .project__technology * {
    width: 25px;
    height: 25px;
  }
  .project__links {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
    justify-content: flex-start;
  }
  .project__links a {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 20px;
    border-radius: 40px;
    background-color: #000;
    color: var(--description);
    text-decoration: none;
    flex: 1 1 200px;
    justify-content: space-between;
  }
  .project__links span {
    font-size: clamp(0.8rem, 2vw, 1.3rem);
  }
  .links__text {
    padding-left: 15px;
  }

  @media (width < 1590px) {
    .project__container {
      max-height: 100%;
    }
    .project {
      gap: 20px;
      padding: 0;
    }
    .project__pictures__container {
      height: 50%;
      border-radius: 10px;
    }
    .slider-image {
      border-radius: 10px;

    }
    .project__container {
      height: 100%;
      padding: 10px;
    }
    .project__links a {
      padding: 10px;
    }
    .project__links {
      gap: 10px;
    }
    .project__technology {
      padding: 10px;
    }
    .project__technology * {
      width: 15px;
      height: 15px;
    }
    .source__code__icon *,
    .live__preview__icon * {
      width: 30px;
      height: 30px;
    }
    .project__technologies {
      gap: 4px;
    }
  }
</style>

<script>
  // Obtener todas las instancias de sliders en la página
const sliders = document.querySelectorAll('.slider-container');

sliders.forEach((sliderContainer) => {
  const sliderImages = sliderContainer.querySelector('.slider__images') as HTMLElement | null;
  const prevButton = sliderContainer.querySelector('.slider__button.prev') as HTMLButtonElement | null;
  const nextButton = sliderContainer.querySelector('.slider__button.next') as HTMLButtonElement | null;

  let currentIndex: number = 0;

  // Función para actualizar la posición del slider
  function updateSlider(): void {
    if (!sliderImages) return;

    const slideWidth: number = sliderImages.querySelector('img')?.clientWidth || 0;
    sliderImages.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
  }

  // Evento para botón "siguiente"
  nextButton?.addEventListener('click', () => {
    if (!sliderImages) return;

    const totalSlides: number = sliderImages.querySelectorAll('img').length;
    currentIndex = (currentIndex + 1) % totalSlides;
    updateSlider();
  });

  // Evento para botón "anterior"
  prevButton?.addEventListener('click', () => {
    if (!sliderImages) return;

    const totalSlides: number = sliderImages.querySelectorAll('img').length;
    currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
    updateSlider();
  });

  // Actualizar el slider al cambiar el tamaño de la ventana
  window.addEventListener('resize', updateSlider);
});
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
  const sliderImages = document.querySelectorAll('.slider-image');
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = document.getElementById('lightbox-image');

  // Check if the buttons already exist
  if (!lightbox.querySelector('.lightbox__button.prev')) {
    const prevButton = document.createElement('button');
    const nextButton = document.createElement('button');
    //apply styles to lightbox__button
    const lightboxButtonStyle = `
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      font-size: 24px;
      border-radius: 50%;
      z-index: 10;
    `;
    prevButton.style.cssText = lightboxButtonStyle;
    nextButton.style.cssText = lightboxButtonStyle;
    //apply styles to prev button
    prevButton.style.left = '10px';
    //apply styles to next button
    nextButton.style.right = '10px';
    // Add classes and text content to buttons
        
    prevButton.className = 'lightbox__button prev';
    prevButton.textContent = '<';
    nextButton.className = 'lightbox__button next';
    nextButton.textContent = '>';
    
    lightbox.appendChild(prevButton);
    lightbox.appendChild(nextButton);

    // Add event listeners to lightbox buttons
    prevButton.addEventListener('click', showPreviousImage);
    nextButton.addEventListener('click', showNextImage);
  }

  // Add event listeners to images
  sliderImages.forEach((image, index) => {
    image.addEventListener('click', () => {
      openLightbox(index);
    });
  });

  // Add event listener to close the lightbox
  lightbox.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      closeLightbox();
    }
  });

  let currentIndex = 0;

  function openLightbox(index) {
    currentIndex = index;
    updateLightboxImage();
    lightbox.classList.add('show');
  }

  function closeLightbox() {
    lightbox.classList.remove('show');
  }

  function showPreviousImage() {
    currentIndex = (currentIndex - 1 + sliderImages.length) % sliderImages.length;
    updateLightboxImage();
  }

  function showNextImage() {
    currentIndex = (currentIndex + 1) % sliderImages.length;
    updateLightboxImage();
  }

  function updateLightboxImage() {
    const src = sliderImages[currentIndex].src;
    lightboxImage.src = src;
  }
});

</script>